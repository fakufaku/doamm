import numpy as np
from pyroomacoustics import MicrophoneArray

_pyramic_loc = np.array(
    [
        [-0.014433756729740652, -0.02500000000000001, -0.14288690166235207],
        [-0.02598076211353317, -0.04500000000000001, -0.11022703842524302],
        [-0.037527767497325684, -0.06500000000000002, -0.077567175188134],
        [-0.04214656965084269, -0.07300000000000001, -0.06450322989329038],
        [-0.04445597072760119, -0.07700000000000001, -0.057971257245868546],
        [-0.049074772881118195, -0.085, -0.04490731195102493],
        [-0.060621778264910706, -0.10500000000000001, -0.012247448713915893],
        [-0.07216878364870323, -0.125, 0.020412414523193145],
        [-0.08660254037844388, -0.1, 0.061237243569579464],
        [-0.08660254037844388, -0.06, 0.061237243569579464],
        [-0.08660254037844388, -0.02, 0.061237243569579464],
        [-0.08660254037844388, -0.004, 0.061237243569579464],
        [-0.08660254037844388, 0.004, 0.061237243569579464],
        [-0.08660254037844388, 0.02, 0.061237243569579464],
        [-0.08660254037844388, 0.06, 0.061237243569579464],
        [-0.08660254037844388, 0.1, 0.061237243569579464],
        [0.028867513459481305, 0.0, -0.14288690166235207],
        [0.05196152422706635, 0.0, -0.11022703842524302],
        [0.07505553499465137, 0.0, -0.077567175188134],
        [0.08429313930168539, 0.0, -0.06450322989329038],
        [0.0889119414552024, 0.0, -0.057971257245868546],
        [0.09814954576223642, 0.0, -0.04490731195102493],
        [0.12124355652982144, 0.0, -0.012247448713915893],
        [0.1443375672974065, 0.0, 0.020412414523193145],
        [0.1299038105676658, -0.025000000000000022, 0.061237243569579464],
        [0.09526279441628827, -0.04500000000000002, 0.061237243569579464],
        [0.060621778264910726, -0.06500000000000002, 0.061237243569579464],
        [0.04676537180435971, -0.07300000000000001, 0.061237243569579464],
        [0.039837168574084196, -0.07700000000000001, 0.061237243569579464],
        [0.02598076211353318, -0.085, 0.061237243569579464],
        [-0.008660254037844359, -0.10500000000000001, 0.061237243569579464],
        [-0.04330127018922191, -0.125, 0.061237243569579464],
        [-0.014433756729740652, 0.02500000000000001, -0.14288690166235207],
        [-0.02598076211353317, 0.04500000000000001, -0.11022703842524302],
        [-0.037527767497325684, 0.06500000000000002, -0.077567175188134],
        [-0.04214656965084269, 0.07300000000000001, -0.06450322989329038],
        [-0.04445597072760119, 0.07700000000000001, -0.057971257245868546],
        [-0.049074772881118195, 0.085, -0.04490731195102493],
        [-0.060621778264910706, 0.10500000000000001, -0.012247448713915893],
        [-0.07216878364870323, 0.125, 0.020412414523193145],
        [-0.04330127018922191, 0.125, 0.061237243569579464],
        [-0.008660254037844359, 0.10500000000000001, 0.061237243569579464],
        [0.02598076211353318, 0.085, 0.061237243569579464],
        [0.039837168574084196, 0.07700000000000001, 0.061237243569579464],
        [0.04676537180435971, 0.07300000000000001, 0.061237243569579464],
        [0.060621778264910726, 0.06500000000000002, 0.061237243569579464],
        [0.09526279441628827, 0.04500000000000002, 0.061237243569579464],
        [0.1299038105676658, 0.025000000000000022, 0.061237243569579464],
    ]
)


def get_pyramic(center):
    """
    Provides a (3x48) array containing the locations of the microphone of the Pyramic array geometry in the columns

    Parameters
    ----------
    center: List or ndarray of length 3
        The 3D coordinates of the center of the array
    """

    center = np.array(center)
    assert (
        center.ndim == 1
    ), "Center should be provided as a 1D array with 3 entries containing the coordinates of the center of the array"
    assert (
        center.shape[0] == 3
    ), "Center should be provided as a 1D array with 3 entries containing the coordinates of the center of the array"

    R = center[:, None] + (_pyramic_loc - np.mean(_pyramic_loc, axis=0)).T

    return R


def get_circular(center, n_mics, radius, rot=0.0, center_mic=False):
    """
    Create a circular array parallel to the x-y plane
    """

    center = np.array(center)
    assert (
        center.ndim == 1
    ), "Center should be provided as a 1D array with 3 entries containing the coordinates of the center of the array"
    assert (
        center.shape[0] == 3
    ), "Center should be provided as a 1D array with 3 entries containing the coordinates of the center of the array"

    R = np.zeros((3, n_mics), dtype=center.dtype)

    if center_mic:
        R[:, 0] = center
        n_mics -= 1

    phi = 2.0 * np.pi * np.arange(n_mics) / n_mics + rot
    R[0, -n_mics:] = center[0] + radius * np.cos(phi)
    R[1, -n_mics:] = center[1] + radius * np.sin(phi)
    R[2, -n_mics:] = center[2]

    return R


def get_amazon_echo(center):
    """
    Returns the coordinates of an Amazon Echo-like microphone array
    """

    R = arrays.get_circular(
        center=mic_array_loc, n_mics=7, radius=0.04, rot=0.0, center_mic=True
    )

    return R


_by_name = {
    "amazon_echo": get_amazon_echo,
    "pyramic": get_pyramic,
}


def get_by_name(name, center):
    return _by_name[name](center)
